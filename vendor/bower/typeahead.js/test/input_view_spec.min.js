describe("Input",function(){var b;b={enter:13,esc:27,tab:9,left:37,right:39,up:38,down:40,normal:65};beforeEach(function(){var e;setFixtures(fixtures.html.input+fixtures.html.hint);e=$("#jasmine-fixtures");this.$input=e.find(".tt-input");this.$hint=e.find(".tt-hint");this.view=new Input({input:this.$input,hint:this.$hint})});it("should throw an error if no hint and/or input is provided",function(){expect(e).toThrow();function e(){new Input({hint:".hint"})}});describe("when the blur DOM event is triggered",function(){it("should reset the input value",function(){this.view.setQuery("wine");this.view.setInputValue("cheese",true);this.$input.blur();expect(this.$input.val()).toBe("wine")});it("should trigger blurred",function(){var e;this.view.onSync("blurred",e=jasmine.createSpy());this.$input.blur();expect(e).toHaveBeenCalled()})});describe("when the focus DOM event is triggered",function(){it("should trigger focused",function(){var e;this.view.onSync("focused",e=jasmine.createSpy());this.$input.focus();expect(e).toHaveBeenCalled()})});describe("when the keydown DOM event is triggered by tab",function(){it("should trigger tabKeyed if no modifiers were pressed",function(){var e;this.view.onSync("tabKeyed",e=jasmine.createSpy());d(this.$input,"keydown",b.tab);expect(e).toHaveBeenCalled()});it("should not trigger tabKeyed if modifiers were pressed",function(){var e;this.view.onSync("tabKeyed",e=jasmine.createSpy());d(this.$input,"keydown",b.tab,true);expect(e).not.toHaveBeenCalled()});it("should prevent default behavior if there is a hint",function(){var e;this.view.setHint("good");this.view.setInputValue("goo");e=d(this.$input,"keydown",b.tab);expect(e.preventDefault).toHaveBeenCalled()})});describe("when the keydown DOM event is triggered by esc",function(){it("should trigger escKeyed",function(){var e;this.view.onSync("escKeyed",e=jasmine.createSpy());d(this.$input,"keydown",b.esc);expect(e).toHaveBeenCalled()})});describe("when the keydown DOM event is triggered by left",function(){it("should trigger leftKeyed",function(){var e;this.view.onSync("leftKeyed",e=jasmine.createSpy());d(this.$input,"keydown",b.left);expect(e).toHaveBeenCalled()})});describe("when the keydown DOM event is triggered by right",function(){it("should trigger rightKeyed",function(){var e;this.view.onSync("rightKeyed",e=jasmine.createSpy());d(this.$input,"keydown",b.right);expect(e).toHaveBeenCalled()})});describe("when the keydown DOM event is triggered by enter",function(){it("should trigger enterKeyed",function(){var e;this.view.onSync("enterKeyed",e=jasmine.createSpy());d(this.$input,"keydown",b.enter);expect(e).toHaveBeenCalled()})});describe("when the keydown DOM event is triggered by up",function(){it("should trigger upKeyed",function(){var e;this.view.onSync("upKeyed",e=jasmine.createSpy());d(this.$input,"keydown",b.up);expect(e).toHaveBeenCalled()});it("should prevent default if no modifers were pressed",function(){var e=d(this.$input,"keydown",b.up);expect(e.preventDefault).toHaveBeenCalled()});it("should not prevent default if modifers were pressed",function(){var e=d(this.$input,"keydown",b.up,true);expect(e.preventDefault).not.toHaveBeenCalled()})});describe("when the keydown DOM event is triggered by down",function(){it("should trigger downKeyed",function(){var e;this.view.onSync("downKeyed",e=jasmine.createSpy());d(this.$input,"keydown",b.down);expect(e).toHaveBeenCalled()});it("should prevent default if no modifers were pressed",function(){var e=d(this.$input,"keydown",b.down);expect(e.preventDefault).toHaveBeenCalled()});it("should not prevent default if modifers were pressed",function(){var e=d(this.$input,"keydown",b.down,true);expect(e.preventDefault).not.toHaveBeenCalled()})});describe("when the input DOM event is triggered",function(){it("should update query",function(){this.view.setQuery("wine");this.view.setInputValue("cheese",true);a(this.$input);waitsFor(function(){return this.view.getQuery()==="cheese"})});it("should trigger queryChanged if the query changed",function(){var e;this.view.setQuery("wine");this.view.setInputValue("cheese",true);this.view.onSync("queryChanged",e=jasmine.createSpy());a(this.$input);expect(e).toHaveBeenCalled()});it("should trigger whitespaceChagned if whitespace changed",function(){var e;this.view.setQuery("wine  bar");this.view.setInputValue("wine bar",true);this.view.onSync("whitespaceChanged",e=jasmine.createSpy());a(this.$input);expect(e).toHaveBeenCalled()})});describe("#focus",function(){it("should focus the input",function(){this.$input.blur();this.view.focus();expect(this.$input).toBeFocused()})});describe("#blur",function(){it("should blur the input",function(){this.$input.focus();this.view.blur();expect(this.$input).not.toBeFocused()})});describe("#getQuery/#setQuery",function(){it("should act as getter/setter to the query property",function(){this.view.setQuery("mouse");expect(this.view.getQuery()).toBe("mouse")})});describe("#getInputValue",function(){it("should act as getter to the input value",function(){this.$input.val("cheese");expect(this.view.getInputValue()).toBe("cheese")})});describe("#setInputValue",function(){it("should act as setter to the input value",function(){this.view.setInputValue("cheese");expect(this.view.getInputValue()).toBe("cheese")});it("should trigger {query|whitespace}Changed when applicable",function(){var f,e;this.view.onSync("queryChanged",f=jasmine.createSpy());this.view.onSync("whitespaceChanged",e=jasmine.createSpy());this.view.setInputValue("cheese head");expect(f).toHaveBeenCalled();expect(e).not.toHaveBeenCalled();this.view.setInputValue("cheese  head");expect(f.callCount).toBe(1);expect(e).toHaveBeenCalled()})});describe("#getHint/#setHint",function(){it("should act as getter/setter to value of hint",function(){this.view.setHint("mountain");expect(this.view.getHint()).toBe("mountain")})});describe("#resetInputValue",function(){it("should reset input value to last query",function(){this.view.setQuery("cheese");this.view.setInputValue("wine",true);this.view.resetInputValue();expect(this.view.getInputValue()).toBe("cheese")})});describe("#clearHint",function(){it("should set the hint value to the empty string",function(){this.view.setHint("cheese");this.view.clearHint();expect(this.view.getHint()).toBe("")})});describe("#clearHintIfInvalid",function(){it("should clear hint if input value is empty string",function(){this.view.setInputValue("",true);this.view.setHint("cheese");this.view.clearHintIfInvalid();expect(this.view.getHint()).toBe("")});it("should clear hint if input value is not prefix of input",function(){this.view.setInputValue("milk",true);this.view.setHint("cheese");this.view.clearHintIfInvalid();expect(this.view.getHint()).toBe("")});it("should clear hint if overflow exists",function(){spyOn(this.view,"hasOverflow").andReturn(true);this.view.setInputValue("che",true);this.view.setHint("cheese");this.view.clearHintIfInvalid();expect(this.view.getHint()).toBe("")});it("should not clear hint if input value is prefix of input",function(){this.view.setInputValue("che",true);this.view.setHint("cheese");this.view.clearHintIfInvalid();expect(this.view.getHint()).toBe("cheese")})});describe("#getLanguageDirection",function(){it("should return the language direction of the input",function(){this.$input.css("direction","ltr");expect(this.view.getLanguageDirection()).toBe("ltr");this.$input.css("direction","rtl");expect(this.view.getLanguageDirection()).toBe("rtl")})});describe("#hasOverflow",function(){it("should return true if the input has overflow text",function(){var e=new Array(1000).join("a");this.view.setInputValue(e);expect(this.view.hasOverflow()).toBe(true)});it("should return false if the input has no overflow text",function(){var e="aah";this.view.setInputValue(e);expect(this.view.hasOverflow()).toBe(false)})});describe("#isCursorAtEnd",function(){it("should return true if the text cursor is at the end",function(){this.view.setInputValue("boo");c(this.$input,3);expect(this.view.isCursorAtEnd()).toBe(true)});it("should return false if the text cursor is not at the end",function(){this.view.setInputValue("boo");c(this.$input,1);expect(this.view.isCursorAtEnd()).toBe(false)})});describe("#destroy",function(){it("should remove event handlers",function(){var f,e;e=this.view.$hint;f=this.view.$input;spyOn(e,"off");spyOn(f,"off");this.view.destroy();expect(e.off).toHaveBeenCalledWith(".tt");expect(f.off).toHaveBeenCalledWith(".tt")});it("should null out its reference to DOM elements",function(){this.view.destroy();expect(this.view.$hint).toBeNull();expect(this.view.$input).toBeNull();expect(this.view.$overflowHelper).toBeNull()})});function a(e){var f,g;g=_.isMsie()?"keypress":"input";f=$.Event(g);e.trigger(f)}function d(e,h,g,i){var f;f=$.Event(h,{keyCode:g,altKey:!!i,ctrlKey:!!i,metaKey:!!i,shiftKey:!!i});spyOn(f,"preventDefault");e.trigger(f);return f}function c(h,g){var f=h[0],e;if(f.setSelectionRange){f.focus();f.setSelectionRange(g,g)}else{if(f.createTextRange){e=f.createTextRange();e.collapse(true);e.moveEnd("character",g);e.moveStart("character",g);e.select()}}}});