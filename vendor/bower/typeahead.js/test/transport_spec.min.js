describe("Transport",function(){beforeEach(function(){jasmine.Ajax.useMock();jasmine.Clock.useMock();this.transport=new Transport()});afterEach(function(){$.each(ajaxRequests,a);$.each(ajaxRequests,a);clearAjaxRequests();Transport.resetCache();function a(b,c){c.readyState!==4&&c.response(fixtures.ajaxResps.ok)}});it("should use jQuery.ajax as the default transport mechanism",function(){var b,c=fixtures.ajaxResps.ok,a=jasmine.createSpy();this.transport.get("/test",a);b=mostRecentAjaxRequest();b.response(c);expect(b.url).toBe("/test");expect(a).toHaveBeenCalledWith(null,c.parsed)});it("should allow the transport mechanism to be configured",function(){var d=fixtures.ajaxResps.ok,b=jasmine.createSpy(),a=jasmine.createSpy().andCallFake(c);this.transport=new Transport({transport:a});this.transport.get("/test",b);jasmine.Clock.tick(0);expect(b).toHaveBeenCalledWith(null,d.parsed);expect(a).toHaveBeenCalledWith("/test",{},jasmine.any(Function),jasmine.any(Function));function c(e,h,g,f){g(d.parsed)}});it("should respect maxPendingRequests configuration",function(){for(var a=0;a<10;a++){this.transport.get("/test"+a,$.noop)}expect(ajaxRequests.length).toBe(6)});it("should support rate limiting",function(){this.transport=new Transport({rateLimiter:b});for(var a=0;a<5;a++){this.transport.get("/test"+a,$.noop)}jasmine.Clock.tick(100);expect(ajaxRequests.length).toBe(1);function b(c){return _.debounce(c,20)}});it("should cache most recent requests",function(){var b=jasmine.createSpy(),a=jasmine.createSpy();this.transport.get("/test1",$.noop);mostRecentAjaxRequest().response(fixtures.ajaxResps.ok);this.transport.get("/test2",$.noop);mostRecentAjaxRequest().response(fixtures.ajaxResps.ok1);expect(ajaxRequests.length).toBe(2);this.transport.get("/test1",b);this.transport.get("/test2",a);jasmine.Clock.tick(0);expect(ajaxRequests.length).toBe(2);expect(b).toHaveBeenCalledWith(null,fixtures.ajaxResps.ok.parsed);expect(a).toHaveBeenCalledWith(null,fixtures.ajaxResps.ok1.parsed)});it("should not cache requests if cache option is false",function(){this.transport=new Transport({cache:false});this.transport.get("/test1",$.noop);mostRecentAjaxRequest().response(fixtures.ajaxResps.ok);this.transport.get("/test1",$.noop);mostRecentAjaxRequest().response(fixtures.ajaxResps.ok);expect(ajaxRequests.length).toBe(2)});it("should prevent dog pile",function(){var b=jasmine.createSpy(),a=jasmine.createSpy();this.transport.get("/test1",b);this.transport.get("/test1",a);mostRecentAjaxRequest().response(fixtures.ajaxResps.ok);expect(ajaxRequests.length).toBe(1);waitsFor(function(){return b.callCount&&a.callCount});runs(function(){expect(b).toHaveBeenCalledWith(null,fixtures.ajaxResps.ok.parsed);expect(a).toHaveBeenCalledWith(null,fixtures.ajaxResps.ok.parsed)})});it("should always make a request for the last call to #get",function(){var b=jasmine.createSpy();for(var a=0;a<6;a++){this.transport.get("/test"+a,$.noop)}this.transport.get("/test"+a,b);expect(ajaxRequests.length).toBe(6);_.each(ajaxRequests,function(c){c.response(fixtures.ajaxResps.ok)});expect(ajaxRequests.length).toBe(7);mostRecentAjaxRequest().response(fixtures.ajaxResps.ok);expect(b).toHaveBeenCalled()});it("should invoke the callback with err set to true on failure",function(){var b,c=fixtures.ajaxResps.err,a=jasmine.createSpy();this.transport.get("/test",a);b=mostRecentAjaxRequest();b.response(c);expect(b.url).toBe("/test");expect(a).toHaveBeenCalledWith(true)});it("should not send cancelled requests",function(){this.transport=new Transport({rateLimiter:a});this.transport.get("/test",$.noop);this.transport.cancel();jasmine.Clock.tick(100);expect(ajaxRequests.length).toBe(0);function a(b){return _.debounce(b,20)}});it("should not send outdated requests",function(){this.transport=new Transport({rateLimiter:a});this.transport.get("/test1",$.noop);jasmine.Clock.tick(100);mostRecentAjaxRequest().response(fixtures.ajaxResps.ok);expect(mostRecentAjaxRequest().url).toBe("/test1");expect(ajaxRequests.length).toBe(1);this.transport.get("/test2",$.noop);this.transport.get("/test1",$.noop);jasmine.Clock.tick(100);expect(ajaxRequests.length).toBe(1);function a(b){return _.debounce(b,20)}})});