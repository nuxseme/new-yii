describe("Bloodhound",function(){beforeEach(function(){jasmine.Ajax.useMock();jasmine.Transport.useMock();jasmine.PersistentStorage.useMock()});afterEach(function(){clearAjaxRequests()});describe("#initialize",function(){beforeEach(function(){this.bloodhound=new Bloodhound({datumTokenizer:a,queryTokenizer:b,local:fixtures.data.simple});spyOn(this.bloodhound,"_initialize").andCallThrough()});it("should not support reinitialization by default",function(){var d,c;d=this.bloodhound.initialize();c=this.bloodhound.initialize();expect(d).toBe(c);expect(this.bloodhound._initialize.callCount).toBe(1)});it("should reinitialize if reintialize flag is true",function(){var d,c;d=this.bloodhound.initialize();c=this.bloodhound.initialize(true);expect(d).not.toBe(c);expect(this.bloodhound._initialize.callCount).toBe(2)})});describe("#add",function(){it("should add datums to search index",function(){var c=jasmine.createSpy();this.bloodhound=new Bloodhound({datumTokenizer:a,queryTokenizer:b,local:[]});this.bloodhound.initialize();this.bloodhound.add(fixtures.data.simple);this.bloodhound.get("big",c);expect(c).toHaveBeenCalledWith([{value:"big"},{value:"bigger"},{value:"biggest"}])})});describe("#clear",function(){it("should remove all datums to search index",function(){var c=jasmine.createSpy();this.bloodhound=new Bloodhound({datumTokenizer:a,queryTokenizer:b,local:fixtures.data.simple});this.bloodhound.initialize();this.bloodhound.clear();this.bloodhound.get("big",c);expect(c).toHaveBeenCalledWith([])})});describe("#clearPrefetchCache",function(){it("should clear persistent storage",function(){this.bloodhound=new Bloodhound({datumTokenizer:a,queryTokenizer:b,prefetch:"/test"});this.bloodhound.initialize();this.bloodhound.clearPrefetchCache();expect(this.bloodhound.storage.clear).toHaveBeenCalled()})});describe("#clearRemoteCache",function(){it("should clear remote request cache",function(){spyOn(Transport,"resetCache");this.bloodhound=new Bloodhound({datumTokenizer:a,queryTokenizer:b,remote:"/test"});this.bloodhound.initialize();this.bloodhound.clearRemoteCache();expect(Transport.resetCache).toHaveBeenCalled()})});describe("local",function(){describe("when local is an array",function(){beforeEach(function(){this.bloodhound=new Bloodhound({datumTokenizer:a,queryTokenizer:b,local:fixtures.data.simple});this.bloodhound.initialize()});it("should hydrate the bloodhound",function(){var c=jasmine.createSpy();this.bloodhound.get("big",c);expect(c).toHaveBeenCalledWith([{value:"big"},{value:"bigger"},{value:"biggest"}])})});describe("when local is a function that returns an array",function(){beforeEach(function(){var c=function(){return fixtures.data.simple};this.bloodhound=new Bloodhound({datumTokenizer:a,queryTokenizer:b,local:c});this.bloodhound.initialize()});it("should hydrate the bloodhound",function(){var c=jasmine.createSpy();this.bloodhound.get("big",c);expect(c).toHaveBeenCalledWith([{value:"big"},{value:"bigger"},{value:"biggest"}])})})});describe("prefetch",function(){it("should throw error if url is not set",function(){expect(c).toThrow();function c(){var e=new Bloodhound({prefetch:{}})}});it("should use url or cacheKey to store data locally",function(){var c=100;this.bloodhound1=new Bloodhound({datumTokenizer:a,queryTokenizer:b,prefetch:{url:"/test1",cacheKey:"woah"}});expect(PersistentStorage).toHaveBeenCalledWith("woah");this.bloodhound2=new Bloodhound({datumTokenizer:a,queryTokenizer:b,prefetch:{url:"/test2",ttl:c,thumbprint:"!"}});expect(PersistentStorage).toHaveBeenCalledWith("/test2");this.bloodhound2.initialize();ajaxRequests[0].response(fixtures.ajaxResps.ok);expect(this.bloodhound2.storage.set).toHaveBeenCalledWith("data",fixtures.serialized.simple,c);expect(this.bloodhound2.storage.set).toHaveBeenCalledWith("protocol","http:",c);expect(this.bloodhound2.storage.set).toHaveBeenCalledWith("thumbprint","%VERSION%!",c)});it("should load data from provided url",function(){var d,c;d=jasmine.createSpy();c=jasmine.createSpy();this.bloodhound1=new Bloodhound({datumTokenizer:a,queryTokenizer:b,prefetch:"/test1"});this.bloodhound2=new Bloodhound({datumTokenizer:a,queryTokenizer:b,prefetch:{url:"/test2"}});this.bloodhound1.initialize();this.bloodhound2.initialize();ajaxRequests[0].response(fixtures.ajaxResps.ok);ajaxRequests[1].response(fixtures.ajaxResps.ok);expect(ajaxRequests[0].url).toBe("/test1");expect(ajaxRequests[1].url).toBe("/test2");this.bloodhound1.get("big",d);this.bloodhound2.get("big",c);expect(d).toHaveBeenCalledWith([{value:"big"},{value:"bigger"},{value:"biggest"}]);expect(c).toHaveBeenCalledWith([{value:"big"},{value:"bigger"},{value:"biggest"}])});it("should clear preexisting data",function(){this.bloodhound=new Bloodhound({datumTokenizer:a,queryTokenizer:b,prefetch:"/test"});spyOn(this.bloodhound,"clear");this.bloodhound.initialize();mostRecentAjaxRequest().response(fixtures.ajaxResps.ok);expect(this.bloodhound.clear).toHaveBeenCalled()});it("should filter data if filter is provided",function(){var e,d;e=jasmine.createSpy().andCallFake(c);d=jasmine.createSpy();this.bloodhound=new Bloodhound({datumTokenizer:a,queryTokenizer:b,prefetch:{url:"/test",filter:e}});this.bloodhound.initialize();mostRecentAjaxRequest().response(fixtures.ajaxResps.ok);expect(e).toHaveBeenCalled();this.bloodhound.get("big",d);expect(d).toHaveBeenCalledWith([{value:"BIG"},{value:"BIGGER"},{value:"BIGGEST"}]);function c(f){return[{value:"BIG"},{value:"BIGGER"},{value:"BIGGEST"}]}});it("should not make a request if data is available in storage",function(){var e=this,d=jasmine.createSpy();this.bloodhound=new Bloodhound({datumTokenizer:a,queryTokenizer:b,prefetch:"/test"});this.bloodhound.storage.get.andCallFake(c);this.bloodhound.initialize();expect(mostRecentAjaxRequest()).toBeNull();this.bloodhound.get("big",d);expect(d).toHaveBeenCalledWith([{value:"big"},{value:"bigger"},{value:"biggest"}]);function c(f){var g;switch(f){case"data":g=fixtures.serialized.simple;break;case"protocol":g="http:";break;case"thumbprint":g=e.bloodhound.prefetch.thumbprint;break}return g}})});describe("remote",function(){it("should perform query substitution on the provided url",function(){this.bloodhound1=new Bloodhound({datumTokenizer:a,queryTokenizer:b,remote:{url:"/test?q=$$",wildcard:"$$"}});this.bloodhound2=new Bloodhound({datumTokenizer:a,queryTokenizer:b,remote:{url:"/test?q=%QUERY",replace:function(d,c){return d.replace("%QUERY",c)}}});this.bloodhound1.initialize();this.bloodhound2.initialize();this.bloodhound1.get("one two",$.noop);this.bloodhound2.get("one two",$.noop);expect(this.bloodhound1.transport.get).toHaveBeenCalledWith("/test?q=one%20two",{type:"GET",dataType:"json"},jasmine.any(Function));expect(this.bloodhound2.transport.get).toHaveBeenCalledWith("/test?q=one two",{type:"GET",dataType:"json"},jasmine.any(Function))});it("should filter the response if a filter is provided",function(){var f,e;e=jasmine.createSpy();f=jasmine.createSpy().andCallFake(c);this.bloodhound=new Bloodhound({datumTokenizer:a,queryTokenizer:b,remote:{url:"/test",filter:f}});this.bloodhound.initialize();this.bloodhound.transport.get.andCallFake(d);this.bloodhound.get("big",e);waitsFor(function(){return e.callCount});runs(function(){expect(f).toHaveBeenCalled();expect(e).toHaveBeenCalledWith([{value:"BIG"},{value:"BIGGER"},{value:"BIGGEST"}])});function c(g){return[{value:"BIG"},{value:"BIGGER"},{value:"BIGGEST"}]}function d(h,i,g){g(null,fixtures.data.simple)}});describe("when there is not matching data in the search index",function(){beforeEach(function(){this.bloodhound=new Bloodhound({datumTokenizer:a,queryTokenizer:b,remote:"/test?q=%QUERY",local:{value:"not an animal"}});this.bloodhound.initialize()});it("should call #get callback once if there is a cache hit",function(){var d=jasmine.createSpy();this.bloodhound.transport.get.andCallFake(c);this.bloodhound.get("dog",d);expect(d.callCount).toBe(1);function c(f,g,e){e(null,fixtures.data.animals);return true}});it("should call #get callback once if there is a cache miss",function(){var d=jasmine.createSpy();this.bloodhound.transport.get.andCallFake(c);this.bloodhound.get("dog",d);expect(d.callCount).toBe(1);function c(f,g,e){e(null,fixtures.data.animals);return false}})});describe("when there is matching data in the search index",function(){beforeEach(function(){this.bloodhound=new Bloodhound({datumTokenizer:a,queryTokenizer:b,remote:"/test?q=%QUERY",local:{value:"dog"}});this.bloodhound.initialize()});it("should call the #get callback twice if there is a cache miss",function(){var d=jasmine.createSpy();this.bloodhound.transport.get.andCallFake(c);this.bloodhound.get("dog",d);expect(d.callCount).toBe(2);function c(f,g,e){e(null,fixtures.data.animals);return false}});it("should call the #get callback once if there is a cache hit",function(){var d=jasmine.createSpy();this.bloodhound.transport.get.andCallFake(c);this.bloodhound.get("dog",d);expect(d.callCount).toBe(1);function c(f,g,e){e(null,fixtures.data.animals);return true}})});it("should should treat failures as empty suggestion sets",function(){var d=jasmine.createSpy();this.bloodhound=new Bloodhound({datumTokenizer:a,queryTokenizer:b,remote:"/test?q=%QUERY"});this.bloodhound.initialize();this.bloodhound.transport.get.andCallFake(c);this.bloodhound.get("dog",d);expect(d).toHaveBeenCalledWith([]);function c(f,g,e){e(true)}})});describe("local/prefetch/remote integration",function(){it("duplicates should be removed if dupDetector is provided",function(){var d;d=jasmine.createSpy();this.bloodhound=new Bloodhound({limit:6,datumTokenizer:a,queryTokenizer:b,dupDetector:function(f,e){return f.value===e.value},local:fixtures.data.animals,remote:{url:"/test?q=%QUERY"}});this.bloodhound.initialize();this.bloodhound.transport.get.andCallFake(c);this.bloodhound.get("dog",d);expect(d).toHaveBeenCalledWith([{value:"dog"}]);waitsFor(function(){return d.callCount===2});runs(function(){expect(d).toHaveBeenCalledWith(fixtures.data.animals)});function c(f,g,e){setTimeout(function(){e(null,fixtures.data.animals)},0)}});it("remote should backfill local/prefetch",function(){var e,d;e=jasmine.createSpy();d=jasmine.createSpy();this.bloodhound=new Bloodhound({limit:3,datumTokenizer:a,queryTokenizer:b,local:fixtures.data.simple,remote:{url:"/test?q=%QUERY"}});this.bloodhound.initialize();this.bloodhound.transport.get.andCallFake(c);this.bloodhound.get("big",e);this.bloodhound.get("bigg",d);expect(e.callCount).toBe(1);expect(d.callCount).toBe(1);expect(e).toHaveBeenCalledWith([{value:"big"},{value:"bigger"},{value:"biggest"}]);expect(d).toHaveBeenCalledWith([{value:"bigger"},{value:"biggest"}]);waitsFor(function(){return d.callCount===2});runs(function(){expect(d).toHaveBeenCalledWith([{value:"bigger"},{value:"biggest"},{value:"dog"}])});function c(g,h,f){setTimeout(function(){f(null,fixtures.data.animals)},0)}})});function a(c){return $.trim(c.value).split(/\s+/)}function b(c){return $.trim(c).split(/\s+/)}});