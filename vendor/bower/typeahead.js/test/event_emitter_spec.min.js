describe("EventEmitter",function(){beforeEach(function(){this.spy=jasmine.createSpy();this.target=_.mixin({},EventEmitter)});it("methods should be chainable",function(){expect(this.target.onSync()).toEqual(this.target);expect(this.target.onAsync()).toEqual(this.target);expect(this.target.off()).toEqual(this.target);expect(this.target.trigger()).toEqual(this.target)});it("#on should take the context a callback should be called in",function(){var d={val:3},e;this.target.onSync("xevent",f,d).trigger("xevent");waitsFor(c,"callback was called in the wrong context");function f(){e=this}function c(){return e===d}});it("#onAsync callbacks should be invoked asynchronously",function(){this.target.onAsync("event",this.spy).trigger("event");expect(this.spy.callCount).toBe(0);waitsFor(b(this.spy,1),"the callback was not invoked")});it("#onSync callbacks should be invoked synchronously",function(){this.target.onSync("event",this.spy).trigger("event");expect(this.spy.callCount).toBe(1)});it("#off should remove callbacks",function(){this.target.onSync("event1 event2",this.spy).onAsync("event1 event2",this.spy).off("event1 event2").trigger("event1 event2");waits(100);runs(b(this.spy,0))});it("methods should accept multiple event types",function(){this.target.onSync("event1 event2",this.spy).onAsync("event1 event2",this.spy).trigger("event1 event2");expect(this.spy.callCount).toBe(2);waitsFor(b(this.spy,4),"the callback was not invoked")});it("the event type should be passed to the callback",function(){this.target.onSync("sync",this.spy).onAsync("async",this.spy).trigger("sync async");waitsFor(a(this.spy,0,["sync"]),"bad args");waitsFor(a(this.spy,1,["async"]),"bad args")});it("arbitrary args should be passed to the callback",function(){this.target.onSync("event",this.spy).onAsync("event",this.spy).trigger("event",1,2);waitsFor(a(this.spy,0,["event",1,2]),"bad args");waitsFor(a(this.spy,1,["event",1,2]),"bad args")});it("callback execution should be cancellable",function(){var d=jasmine.createSpy().andCallFake(c);this.target.onSync("one",d).onSync("one",this.spy).onAsync("two",d).onAsync("two",this.spy).onSync("three",d).onAsync("three",this.spy).trigger("one two three");waitsFor(b(d,3));waitsFor(b(this.spy,0));function c(){return false}});function b(c,d){return function(){return c.callCount===d}}function a(d,c,e){return function(){var f=jasmine.getEnv(),g=d.calls[c]?d.calls[c].args:undefined;return f.equals_(g,e)}}});